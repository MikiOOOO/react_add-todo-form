{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","TodoList","todos","map","App","useState","todosFromServer","todoExecutor","usersFromServer","find","setTodos","isSubmitted","setIsSubmitted","newTodoDefault","newTodo","setNewTodo","currentId","Math","max","action","method","onSubmit","event","preventDefault","length","htmlFor","type","placeholder","value","onChange","target","getTitle","selectedUser","getUser","disabled","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d81c7b9.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../../types/User';\n\ninterface UserInfoPros {\n  user: User,\n}\n\nexport const UserInfo = ({ user }: UserInfoPros) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import { Todo } from '../../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface TodoInfoProps {\n  todo: Todo,\n}\n\nexport const TodoInfo = ({ todo }: TodoInfoProps) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={`TodoInfo ${completed && ' TodoInfo--completed'}`}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface TodoListProps {\n  todos: Todo[],\n}\n\nexport const TodoList = ({ todos }: TodoListProps) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from '../types/Todo';\nimport { TodoList } from './components/TodoList';\n\nconst getTodos = (): Todo[] => {\n  return todosFromServer.map(todo => {\n    const todoExecutor = usersFromServer\n      .find(user => user.id === todo.userId) || null;\n\n    return {\n      title: todo.title,\n      completed: todo.completed,\n      id: todo.id,\n      user: todoExecutor,\n    };\n  });\n};\n\nexport const App = () => {\n  const [todos, setTodos] = useState(getTodos());\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const newTodoDefault = {\n    title: '',\n    completed: false,\n    id: -1,\n    user: null,\n  };\n\n  const [newTodo, setNewTodo] = useState<Todo>({\n    ...newTodoDefault,\n  });\n\n  let currentId: number = Math.max(...todos.map(todo => todo.id)) + 1;\n\n  const getTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTodo({\n      ...newTodo,\n      title: event.target.value,\n    });\n  };\n\n  const getUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedUser = usersFromServer\n      .find(user => user.id === +event.target.value) || null;\n\n    setNewTodo({\n      ...newTodo,\n      user: selectedUser,\n    });\n  };\n\n  const submitNewTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsSubmitted(true);\n    if (newTodo.title.length && newTodo.user) {\n      newTodo.id = currentId;\n      currentId += 1;\n      setTodos([...todos, newTodo]);\n      setIsSubmitted(false);\n      setNewTodo({ ...newTodoDefault });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={submitNewTodo}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={newTodo.title}\n            onChange={(event) => getTitle(event)}\n          />\n          {!newTodo.title.length && isSubmitted\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            value={newTodo.user?.id ? newTodo.user.id : '0'}\n            onChange={(event) => getUser(event)}\n          >\n            <option value=\"0\" disabled selected>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {!newTodo.user && isSubmitted\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}